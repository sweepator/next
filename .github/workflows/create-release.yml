name: Create Release

on:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish pre-release (true|false)'
        required: false
        default: 'false'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/develop')
    outputs:
      releaseBranch: ${{ steps.envVars.outputs.releaseBranch }}
      
    steps:

      - name: Fetch all history for all tags and branches
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: 5.7.0

      - name: Initialize git configuration
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Use GitVersion
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.11
      
      - uses: paulhatch/semantic-version@v4.0.3
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: ""
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "/^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\([\\w\\s]*\\))?(!:|:.*\\n\\n((.+\\n)+\\n)?BREAKING CHANGE:\\s.+)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "/^(feat)(\\([\\w\\s]*\\))?:"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Named version, will be used as suffix for name version tag
          namespace: my-service
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

      - name: Set environment variables for release
        id: envVars
        run: |
          echo "RELEASE_BRANCH=release/${{ steps.gitversion.outputs.MajorMinorPatch }}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_V=release/${{ steps.version.outputs.version }}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_VT=release/${{ steps.version.outputs.version_tag }}" >> $GITHUB_ENV
          echo "::set-output name=releaseBranch::release/${{ steps.gitversion.outputs.MajorMinorPatch }}"
      
      - name: Create release branch
        run: git checkout -b ${{ env.RELEASE_BRANCH}}

      - name: Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@1.3.0
        with:
          tag: ${{ steps.gitversion.outputs.MajorMinorPatch }}

      - name: Commit release branch
        id: make-commit
        run: |
          git add -A
          git commit --message "skip(): Prepare release ${{ steps.gitversion.outputs.MajorMinorPatch }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"
            
      - name: Push release branch
        run: git push origin ${{ env.RELEASE_BRANCH }}
      
      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: ${{ env.RELEASE_BRANCH }}
          base: master
          title: Release version ${{ steps.gitversion.outputs.MajorMinorPatch }}
          reviewers: ${{ github.actor }} 
          body: |
           This PR was created in response workflow running. Release commit: ${{ steps.make-commit.outputs.commit }}

  publish_prerelease:
    name: Publish pre-release
    runs-on: ubuntu-latest
    needs: create_release
    if: github.event.inputs.publish == 'true'
    steps:

    - name: Publish release
      uses: convictional/trigger-workflow-and-wait@v1.6.1
      with:
        owner: cpilao
        repo: Next
        github_token: ${{ secrets.WORKFLOWS_TOKEN }}
        workflow_file_name: publish-prerelease.yml
        ref: ${{ needs.create_release.outputs.releaseBranch}}
        wait_workflow: false